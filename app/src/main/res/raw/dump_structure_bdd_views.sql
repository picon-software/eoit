--Copyright (C) 2012 Picon software

--This program is free software; you can redistribute it and/or modify
--it under the terms of the GNU General Public License as published by
--the Free Software Foundation; either version 2 of the License, or
--(at your option) any later version.

--This program is distributed in the hope that it will be useful,
--but WITHOUT ANY WARRANTY; without even the implied warranty of
--MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
--GNU General Public License for more details.

--You should have received a copy of the GNU General Public License along
--with this program; if not, write to the Free Software Foundation, Inc.,
--51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

DROP VIEW IF EXISTS manufacture_price_repartition;
DROP VIEW IF EXISTS manufacturing_plan_shopping_list;
DROP VIEW IF EXISTS manufacturing_plan_lvl4;
DROP VIEW IF EXISTS manufacturing_plan_lvl3;
DROP VIEW IF EXISTS manufacturing_plan_lvl2;
DROP VIEW IF EXISTS manufacturing_plan_lvl1;
DROP VIEW IF EXISTS manufacturing_plan_lvl0;
DROP VIEW IF EXISTS asteroid_constitution;
DROP VIEW IF EXISTS item_to_refresh_lvl4;
DROP VIEW IF EXISTS item_to_refresh_lvl3;
DROP VIEW IF EXISTS item_to_refresh_lvl2;
DROP VIEW IF EXISTS item_to_refresh_lvl1;
DROP VIEW IF EXISTS item_to_refresh_lvl0;
DROP VIEW IF EXISTS all_available_stations;
DROP VIEW IF EXISTS material_price_item;
DROP VIEW IF EXISTS blueprint_info;
DROP VIEW IF EXISTS invention_material_price_item;
DROP VIEW IF EXISTS invention_initiator_price_item;
DROP VIEW IF EXISTS manufacturing_skill;
DROP VIEW IF EXISTS invention_skill;
DROP VIEW IF EXISTS material_blueprint_copy;
DROP VIEW IF EXISTS refine_price_item;
DROP VIEW IF EXISTS reaction_price_item;
DROP VIEW IF EXISTS planetary_price_item;
DROP VIEW IF EXISTS manufacturing_items;
DROP VIEW IF EXISTS item_info;
DROP VIEW IF EXISTS stock_info;
DROP VIEW IF EXISTS item_blueprint_info;
DROP VIEW IF EXISTS all_item_materials;

--Views
--Asteroid constitutions
CREATE VIEW asteroid_constitution AS SELECT ac._id, t.text AS name, volume, portion_size, group_id, sum(tritanium_quantity) AS tritanium_quantity, sum(pyerite_quantity) AS pyerite_quantity, sum(mexallon_quantity) AS mexallon_quantity, sum(isogen_quantity) AS isogen_quantity, sum(nocxium_quantity) AS nocxium_quantity, sum(zydrine_quantity) AS zydrine_quantity, sum(megacyte_quantity) AS megacyte_quantity, sum(morphite_quantity) AS morphite_quantity FROM (SELECT i._id, i.volume, i.portion_size, i.group_id, rm.quantity AS tritanium_quantity, 0 AS pyerite_quantity, 0 AS mexallon_quantity, 0 AS isogen_quantity, 0 AS nocxium_quantity, 0 AS zydrine_quantity, 0 AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 34 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, rm.quantity AS pyerite_quantity, 0 AS mexallon_quantity, 0 AS isogen_quantity, 0 AS nocxium_quantity, 0 AS zydrine_quantity, 0 AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 35 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, 0 AS pyerite_quantity, rm.quantity AS mexallon_quantity, 0 AS isogen_quantity, 0 AS nocxium_quantity, 0 AS zydrine_quantity, 0 AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 36 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, 0 AS pyerite_quantity, 0 AS mexallon_quantity, rm.quantity AS isogen_quantity, 0 AS nocxium_quantity, 0 AS zydrine_quantity, 0 AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 37 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, 0 AS pyerite_quantity, 0 AS mexallon_quantity, 0 AS isogen_quantity, rm.quantity AS nocxium_quantity, 0 AS zydrine_quantity, 0 AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 38 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, 0 AS pyerite_quantity, 0 AS mexallon_quantity, 0 AS isogen_quantity, 0 AS nocxium_quantity, rm.quantity AS zydrine_quantity, 0 AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 39 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, 0 AS pyerite_quantity, 0 AS mexallon_quantity, 0 AS isogen_quantity, 0 AS nocxium_quantity, 0 AS zydrine_quantity, rm.quantity AS megacyte_quantity, 0 AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 40 UNION SELECT i._id, i.volume, i.portion_size, i.group_id, 0 AS tritanium_quantity, 0 AS pyerite_quantity, 0 AS mexallon_quantity, 0 AS isogen_quantity, 0 AS nocxium_quantity, 0 AS zydrine_quantity, 0 AS megacyte_quantity, rm.quantity AS morphite_quantity FROM item i JOIN groups g ON g._id = i.group_id JOIN refine_materials rm ON i._id = rm.item_id WHERE g.categorie_id = 25 AND portion_size > 1 AND rm.item_material_id = 11399) ac JOIN translation_key tk ON ac._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id GROUP BY ac._id;

--Item info
CREATE VIEW item_info AS SELECT i._id, t.text AS name, i.volume, i.chosen_price_id, i.favorite, i.meta_group_id, i.group_id, i.portion_size, g.categorie_id, p.buy_price, p.sell_price, p.own_price, p.produce_price, p.last_update, p.solar_system_id, t2.text AS category_name, ss.name AS region_name FROM item i LEFT JOIN prices p ON i._id = p.item_id AND p.solar_system_id IN (SELECT  solar_system_id  FROM stations  WHERE role IN (1, 2)) LEFT JOIN solar_systems ss ON p.solar_system_id = ss._id JOIN groups g ON i.group_id = g._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id JOIN translation_key tk2 ON g.categorie_id = tk2.key_id AND tk2.tc_id = 6 JOIN languages l2 ON tk2.language_id = l2._id AND l2.current = 1 JOIN translation t2 ON tk2.tra_id = t2.tra_id;

--Stock info
CREATE VIEW stock_info AS SELECT s._id, s.item_id, t.text AS name, t2.text AS category_name, s.quantity FROM stock s JOIN item i ON s.item_id = i._id JOIN groups g ON i.group_id = g._id JOIN stations st ON s.location_id = st._id AND st.role IN (0, 2) JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id JOIN translation_key tk2 ON g.categorie_id = tk2.key_id AND tk2.tc_id = 6 JOIN languages l2 ON tk2.language_id = l2._id AND l2.current = 1 JOIN translation t2 ON tk2.tra_id = t2.tra_id;

--manufacturing plan
--CREATE VIEW manufacturing_plan_lvl0 AS SELECT material_item_id AS _id, i2.item_id, i2.name, chosen_price_id, SUM((i2.quantity + waste) * ms.number_of_runs) AS tot_required_quantity, max(SUM((i2.quantity + waste) * ms.number_of_runs) - IFNULL(st.quantity, 0), 0) AS tot_needed_quantity, max(-(SUM((i2.quantity + waste) * ms.number_of_runs) - IFNULL(st.quantity, 0)), 0) AS remaining_quantity FROM ( SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, round(im.quantity * ( CASE b.ml >= 0 WHEN 1 THEN (0.1 / (1 + IFNULL(b.ml, 0))) ELSE (0.1 * (1 - IFNULL(b.ml, 0))) END ) + 0.25 - (0.05 * ( IFNULL(( SELECT level FROM skill WHERE skill_id = 3388 ), 5) ))) AS waste, 1 AS damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_session ms ON im.item_id = ms.item_id WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, 0 AS waste, im.damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_session ms ON im.item_id = ms.item_id WHERE im.activity_id = 1 AND g.categorie_id <> 16 ) i2 JOIN manufacturing_session ms ON i2.item_id = ms.item_id JOIN stations s ON s.role IN (0, 2) LEFT JOIN stock st ON i2.material_item_id = st.item_id AND st.location_id = s._id GROUP BY material_item_id;

--CREATE VIEW manufacturing_plan_lvl1 AS SELECT i2.material_item_id AS _id, i2.item_id, i2.name, i2.chosen_price_id, SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) AS tot_required_quantity, max(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0)), 0) AS tot_needed_quantity, max(-(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0))), 0) AS remaining_quantity FROM ( SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, round(im.quantity * ( CASE b.ml >= 0 WHEN 1 THEN (0.1 / (1 + IFNULL(b.ml, 0))) ELSE (0.1 * (1 - IFNULL(b.ml, 0))) END ) + 0.25 - (0.05 * ( IFNULL(( SELECT level FROM skill WHERE skill_id = 3388 ), 5) ))) AS waste, 1 AS damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl0 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION ALL SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, 0 AS waste, im.damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl0 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id = 1 AND g.categorie_id <> 16 ) i2 JOIN manufacturing_plan_lvl0 mp ON i2.item_id = mp._id JOIN stations s ON s.role IN (0, 2) LEFT JOIN stock st ON i2.material_item_id = st.item_id AND st.location_id = s._id LEFT JOIN manufacturing_plan_lvl0 previous_plan ON i2.material_item_id = previous_plan._id GROUP BY i2.material_item_id;

--CREATE VIEW manufacturing_plan_lvl2 AS SELECT i2.material_item_id AS _id, i2.item_id, i2.name, i2.chosen_price_id, SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) AS tot_required_quantity, max(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0)), 0) AS tot_needed_quantity, max(-(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0))), 0) AS remaining_quantity FROM ( SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, round(im.quantity * ( CASE b.ml >= 0 WHEN 1 THEN (0.1 / (1 + IFNULL(b.ml, 0))) ELSE (0.1 * (1 - IFNULL(b.ml, 0))) END ) + 0.25 - (0.05 * ( IFNULL(( SELECT level FROM skill WHERE skill_id = 3388 ), 5) ))) AS waste, 1 AS damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl1 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION ALL SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, 0 AS waste, im.damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl1 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id = 1 AND g.categorie_id <> 16 ) i2 JOIN manufacturing_plan_lvl1 mp ON i2.item_id = mp._id JOIN stations s ON s.role IN (0, 2) LEFT JOIN stock st ON i2.material_item_id = st.item_id AND st.location_id = s._id LEFT JOIN manufacturing_plan_lvl1 previous_plan ON i2.material_item_id = previous_plan._id GROUP BY i2.material_item_id;

--CREATE VIEW manufacturing_plan_lvl3 AS SELECT i2.material_item_id AS _id, i2.item_id, i2.name, i2.chosen_price_id, SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) AS tot_required_quantity, max(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0)), 0) AS tot_needed_quantity, max(-(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0))), 0) AS remaining_quantity FROM ( SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, round(im.quantity * ( CASE b.ml >= 0 WHEN 1 THEN (0.1 / (1 + IFNULL(b.ml, 0))) ELSE (0.1 * (1 - IFNULL(b.ml, 0))) END ) + 0.25 - (0.05 * ( IFNULL(( SELECT level FROM skill WHERE skill_id = 3388 ), 5) ))) AS waste, 1 AS damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl2 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION ALL SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, 0 AS waste, im.damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl2 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id = 1 AND g.categorie_id <> 16 ) i2 JOIN manufacturing_plan_lvl2 mp ON i2.item_id = mp._id JOIN stations s ON s.role IN (0, 2) LEFT JOIN stock st ON i2.material_item_id = st.item_id AND st.location_id = s._id LEFT JOIN manufacturing_plan_lvl2 previous_plan ON i2.material_item_id = previous_plan._id GROUP BY i2.material_item_id;

--CREATE VIEW manufacturing_plan_lvl4 AS SELECT i2.material_item_id AS _id, i2.item_id, i2.name, i2.chosen_price_id, SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) AS tot_required_quantity, max(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0)), 0) AS tot_needed_quantity, max(-(SUM((i2.quantity + i2.waste) * mp.tot_needed_quantity) - IFNULL(previous_plan.remaining_quantity, IFNULL(st.quantity, 0))), 0) AS remaining_quantity FROM ( SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, round(im.quantity * ( CASE b.ml >= 0 WHEN 1 THEN (0.1 / (1 + IFNULL(b.ml, 0))) ELSE (0.1 * (1 - IFNULL(b.ml, 0))) END ) + 0.25 - (0.05 * ( IFNULL(( SELECT level FROM skill WHERE skill_id = 3388 ), 5) ))) AS waste, 1 AS damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl3 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION ALL SELECT im.item_id, im.material_item_id, i.name, i.chosen_price_id, im.quantity, 0 AS waste, im.damage_per_job FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN blueprint b ON b.produce_item_id = im.item_id JOIN manufacturing_plan_lvl3 mp ON im.item_id = mp._id AND mp.chosen_price_id = 2 WHERE im.activity_id = 1 AND g.categorie_id <> 16 ) i2 JOIN manufacturing_plan_lvl3 mp ON i2.item_id = mp._id JOIN stations s ON s.role IN (0, 2) LEFT JOIN stock st ON i2.material_item_id = st.item_id AND st.location_id = s._id LEFT JOIN manufacturing_plan_lvl3 previous_plan ON i2.material_item_id = previous_plan._id GROUP BY i2.material_item_id;

--CREATE VIEW manufacturing_plan_shopping_list AS SELECT sl._id, sl.name, chosen_price_id, SUM(tot_needed_quantity) AS tot_needed_quantity, SUM(tot_required_quantity) - SUM(tot_needed_quantity) AS own_quantity, CASE WHEN chosen_price_id = 0 THEN p.sell_price WHEN chosen_price_id = 1 THEN p.buy_price WHEN chosen_price_id = 3 THEN p.own_price ELSE NULL END price FROM ( SELECT item_id, _id, name, chosen_price_id, tot_needed_quantity, tot_required_quantity FROM manufacturing_plan_lvl0 WHERE chosen_price_id <> 2 OR chosen_price_id IS NULL UNION ALL SELECT item_id, _id, name, chosen_price_id, tot_required_quantity, tot_required_quantity FROM manufacturing_plan_lvl1 WHERE chosen_price_id <> 2 OR chosen_price_id IS NULL UNION ALL SELECT item_id, _id, name, chosen_price_id, tot_needed_quantity, tot_required_quantity FROM manufacturing_plan_lvl2 WHERE chosen_price_id <> 2 OR chosen_price_id IS NULL UNION ALL SELECT item_id, _id, name, chosen_price_id, tot_needed_quantity, tot_required_quantity FROM manufacturing_plan_lvl3 WHERE chosen_price_id <> 2 OR chosen_price_id IS NULL UNION ALL SELECT item_id, _id, name, chosen_price_id, tot_needed_quantity, tot_required_quantity FROM manufacturing_plan_lvl4 WHERE chosen_price_id <> 2 OR chosen_price_id IS NULL) sl LEFT JOIN prices p ON sl._id = p.item_id GROUP BY sl._id ORDER BY sl._id;

--CREATE VIEW manufacture_price_repartition AS SELECT _id, name, tot_needed_quantity * price AS tot_price, tot_prod.tot tot_prod, tot_own.tot tot_own, tot_buy.tot tot_to_buy FROM manufacturing_plan_shopping_list sl JOIN (SELECT sum(ms.number_of_runs * b.unit_per_batch * p.produce_price) tot FROM manufacturing_session ms JOIN prices p ON ms.item_id = p.item_id JOIN blueprint b ON ms.item_id = b.produce_item_id) tot_prod JOIN (SELECT sum(own_quantity * price) tot FROM manufacturing_plan_shopping_list sl) tot_own JOIN (SELECT sum(tot_needed_quantity * price) tot FROM manufacturing_plan_shopping_list sl) tot_buy ORDER BY tot_needed_quantity * price DESC LIMIT 3;

--Items to refresh
--CREATE VIEW item_to_refresh_lvl0 AS SELECT material_item_id FROM (SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item i2 ON im.item_id = i2._id WHERE im.activity_id IS NULL AND g.categorie_id <> 16 AND i2.favorite = 1 UNION SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item i2 ON im.item_id = i2._id WHERE im.activity_id = 1 AND g.categorie_id <> 16 AND i2.favorite = 1) i2 GROUP BY material_item_id;

--CREATE VIEW item_to_refresh_lvl1 AS SELECT material_item_id FROM (SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl0 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl0 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id = 1 AND g.categorie_id <> 16) i2 GROUP BY material_item_id;

--CREATE VIEW item_to_refresh_lvl2 AS SELECT material_item_id FROM (SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl1 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl1 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id = 1 AND g.categorie_id <> 16) i2 GROUP BY material_item_id;

--CREATE VIEW item_to_refresh_lvl3 AS SELECT material_item_id FROM (SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl2 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl2 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id = 1 AND g.categorie_id <> 16) i2 GROUP BY material_item_id;

--CREATE VIEW item_to_refresh_lvl4 AS SELECT material_item_id FROM (SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl3 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id IS NULL AND g.categorie_id <> 16 UNION SELECT im.material_item_id FROM item_materials im JOIN item i ON im.material_item_id = i._id JOIN groups g ON i.group_id = g._id JOIN item_to_refresh_lvl3 i2 ON im.item_id = i2.material_item_id WHERE im.activity_id = 1 AND g.categorie_id <> 16) i2 GROUP BY material_item_id;

--Stations list
CREATE VIEW all_available_stations AS SELECT DISTINCT s._id, s.station_type_id, s.name, r.name AS region_name, s.favorite, s.role, s.standing, 'Favorite' AS category_name FROM stations s JOIN solar_systems ss ON (s.solar_system_id = ss._id) JOIN regions r ON (r._id = ss.region_id) WHERE s.favorite = 1 UNION SELECT DISTINCT s._id, s.station_type_id, s.name, r.name AS region_name, s.favorite, s.role, s.standing, 'Main hubs' AS category_name FROM stations s JOIN solar_systems ss ON (s.solar_system_id = ss._id) JOIN regions r ON (r._id = ss.region_id) WHERE s._id IN (60003760, 60008494, 60004588, 60011866, 60005686, 60011740, 60001096) AND s.favorite IS NULL UNION SELECT DISTINCT s._id, s.station_type_id, s.name, r.name AS region_name, s.favorite, s.role, s.standing, 'From your assets' AS category_name FROM stations s JOIN solar_systems ss ON (s.solar_system_id = ss._id) JOIN regions r ON (r._id = ss.region_id) WHERE s._id IN (SELECT DISTINCT location_id FROM stock) AND s._id NOT IN (60003760, 60008494, 60004588, 60011866, 60005686, 60011740, 60001096) AND s.favorite IS NULL ORDER BY favorite DESC, category_name DESC, role DESC;

--Item material prices
CREATE VIEW material_price_item AS SELECT bm.item_id AS _id, bm.item_id AS material_item_id, bp.item_id AS item_id, i.chosen_price_id, t.text AS name, i.volume, i.group_id, g.categorie_id, p.buy_price, p.sell_price, p.produce_price, p.own_price, CASE ((bm.quantity * (100 - IFNULL(ml, 0)) / 10) - round(bm.quantity * (100 - IFNULL(ml, 0)) / 100) * 10) > 0 WHEN 1 THEN round(bm.quantity * (100 - IFNULL(ml, 0)) / 100) + 1 ELSE round(bm.quantity * (100 - IFNULL(ml, 0)) / 100) END AS quantity, CASE (bm.quantity * (100 - IFNULL(ml, 0)) / 100.0) < 1 WHEN 1 THEN 1 ELSE (bm.quantity * (100 - IFNULL(ml, 0)) / 100.0) END AS float_quantity, b.research_price, b.maxProductionLimit, bp.quantity AS unit_per_batch, b.decryptor_id, b.ml FROM blueprint_product bp JOIN blueprint_material bm ON bp.blueprint_id = bm.blueprint_id AND bm.activity_id = bp.activity_id JOIN blueprint b ON bp.blueprint_id = b._id JOIN item i ON bm.item_id = i._id JOIN groups g ON i.group_id = g._id JOIN translation_key tk ON bm.item_id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id LEFT JOIN prices p ON bm.item_id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2)) WHERE bm.activity_id = 1;

--Manufacturing items
CREATE VIEW manufacturing_items AS SELECT bp.item_id AS item_id, bm.item_id AS material_item_id, bm.quantity FROM blueprint_product bp JOIN blueprint_material bm ON bp.blueprint_id = bm.blueprint_id AND bm.activity_id = bp.activity_id WHERE bm.activity_id = 1;

--Blueprint info
CREATE VIEW blueprint_info AS SELECT b._id, t.text AS name, b.ml, b.pl, bp.item_id AS produce_item_id, bp.quantity AS unit_per_batch, bp.activity_id, bp2.probability, ba.time, i.meta_group_id AS techLevel, b.maxProductionLimit, b.research_price, i.parentTypeID, b.decryptor_id, b.metalevel, b.relic_id FROM blueprint_product bp JOIN blueprint b ON bp.blueprint_id = b._id JOIN blueprint_activity ba ON bp.blueprint_id = ba.blueprint_id AND bp.activity_id = ba.activity_id LEFT JOIN blueprint_product bp2 ON bp2.item_id = b._id AND bp2.activity_id = 8 JOIN item i ON bp.blueprint_id = i._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id;

--Invention Item material prices
CREATE VIEW invention_material_price_item AS SELECT inv.*, t.text AS name, p.buy_price, p.sell_price, p.produce_price, p.own_price FROM (SELECT bm.item_id AS _id, bp2.item_id AS produce_item_id, bp.item_id, bp.blueprint_id AS initiator_id, i.chosen_price_id, bm.quantity AS quantity, bm.consume FROM blueprint_product bp JOIN blueprint_material bm ON bp.blueprint_id = bm.blueprint_id AND bp.activity_id = bm.activity_id AND bm.activity_id = 8 JOIN blueprint_product bp2 ON bp.item_id = bp2.blueprint_id AND bp2.activity_id = 1 JOIN item i ON bm.item_id = i._id JOIN blueprint b ON bp.item_id = b._id AND bp.blueprint_id = b.relic_id UNION ALL SELECT decryptor._id AS _id, bp.item_id AS produce_item_id, NULL, NULL, decryptor.chosen_price_id, 1 AS quantity, 1 AS consume FROM blueprint b JOIN blueprint_product bp ON bp.blueprint_id = b._id AND bp.activity_id = 1 JOIN item decryptor ON b.decryptor_id = decryptor._id UNION ALL SELECT relic._id AS _id, bp.item_id AS produce_item_id, NULL, NULL, relic.chosen_price_id, 1 AS quantity, 1 AS consume FROM blueprint b JOIN blueprint_product bp ON bp.blueprint_id = b._id AND bp.activity_id = 1 JOIN item relic ON b.relic_id = relic._id AND relic.group_id IN (971, 990, 991, 992, 993, 997) ) inv LEFT JOIN prices p ON inv._id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2)) JOIN translation_key tk ON inv._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id;

--Invention Initiator prices
CREATE VIEW invention_initiator_price_item AS SELECT bp.blueprint_id AS _id, bp2.item_id AS produce_item_id, bp.probability, bp.quantity AS max_production_limit, i.chosen_price_id, t.text AS name, p.buy_price, p.sell_price, p.produce_price, p.own_price FROM blueprint_product bp JOIN blueprint_product bp2 ON bp.item_id = bp2.blueprint_id AND bp2.activity_id = 1 JOIN item i ON bp.blueprint_id = i._id LEFT JOIN prices p ON bp.blueprint_id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2)) JOIN translation_key tk ON bp.blueprint_id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id;

--Manufacturing skills
CREATE VIEW manufacturing_skill AS SELECT bp.item_id, bs.item_id AS skill_id, t.text AS name, bs.level FROM blueprint_skill bs JOIN blueprint_product bp ON bs.blueprint_id = bp.blueprint_id AND bs.activity_id = bp.activity_id JOIN item i ON bs.item_id = i._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id WHERE bs.activity_id = 1;

--Invention skills
CREATE VIEW invention_skill AS SELECT DISTINCT skill._id AS _id, bp.item_id, t.text AS name, bs.activity_id, bs.level AS required_skill_level, CASE s.level IS NULL WHEN 1 THEN 0 ELSE s.level END AS skill_level, CASE s.level IS NULL WHEN 1 THEN 0 ELSE s.level >= bs.level END AS learnt_ok, CASE s.level IS NULL WHEN 1 THEN 1 ELSE NOT (s.level >= bs.level) END AS learnt_ko FROM blueprint_product bp JOIN blueprint_skill bs ON bp.blueprint_id = bs.blueprint_id AND bs.activity_id = 8 JOIN item skill ON bs.item_id = skill._id LEFT JOIN skill s ON bs.item_id = s.skill_id JOIN translation_key tk ON skill._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id ORDER BY bp.item_id ASC;

--Blueprint copy
CREATE VIEW material_blueprint_copy AS SELECT items.*, t.text AS name FROM (SELECT i2._id AS _id, i._id AS produce_item_id, 0 AS chosen_price_id, 0 AS buy_price, 0 AS sell_price, 0 AS produce_price, 0 AS own_price, 1 AS quantity, ba.time, b.maxProductionLimit AS max_production_limit FROM item i JOIN blueprint_product bp ON i.parentTypeID = bp.item_id AND bp.activity_id = 1 JOIN blueprint_activity ba ON bp.blueprint_id = ba.blueprint_id AND ba.activity_id = 5 JOIN item i2 ON bp.blueprint_id = i2._id JOIN blueprint b ON bp.blueprint_id = b._id UNION ALL SELECT bm.item_id, i._id, i2.chosen_price_id, p.buy_price, p.sell_price, p.produce_price, p.own_price, bm.quantity, NULL, NULL FROM item i JOIN blueprint_product bp ON i.parentTypeID = bp.item_id AND bp.activity_id = 1 JOIN blueprint_material bm ON bp.blueprint_id = bm.blueprint_id AND bm.activity_id = 5 JOIN item i2 ON bm.item_id = i2._id LEFT JOIN prices p ON bm.item_id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2))) items JOIN translation_key tk ON items._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id;

--Refine material prices
CREATE VIEW refine_price_item AS SELECT rm.item_material_id AS _id, rm.item_id AS item_id, rm.quantity, i.chosen_price_id, t.text AS name, i.volume, i2.group_id, g.categorie_id, i2.portion_size, p.buy_price, p.sell_price, p.produce_price, p.own_price FROM refine_materials rm JOIN item i ON rm.item_material_id = i._id JOIN item i2 ON rm.item_id = i2._id JOIN groups g ON i.group_id = g._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id LEFT JOIN prices p ON i._id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2));

--Reaction material prices
CREATE VIEW reaction_price_item AS SELECT rm.item_material_id AS _id, rm.item_id AS item_id, rm.quantity, rm.produce_quantity, i.chosen_price_id, t.text AS name, i.volume, i.group_id, g.categorie_id, i2.portion_size, p.buy_price, p.sell_price, p.produce_price, p.own_price FROM reaction_materials rm JOIN item i ON rm.item_material_id = i._id JOIN item i2 ON rm.item_id = i2._id JOIN groups g ON i.group_id = g._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id LEFT JOIN prices p ON i._id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2));

--Planetary material prices
CREATE VIEW planetary_price_item AS SELECT input.item_id AS _id, output.item_id, input.quantity, output.quantity AS produce_quantity, i.chosen_price_id, t.text AS name, i.volume, i.group_id, g.categorie_id, p.buy_price, p.sell_price, p.produce_price, p.own_price FROM planet_schematics_type_map output JOIN planet_schematics_type_map input ON output.schematic_id = input.schematic_id AND output.input = 0 AND input.input = 1 JOIN item i ON input.item_id = i._id JOIN groups g ON i.group_id = g._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id LEFT JOIN prices p ON input.item_id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2));

--Item & Blueprint info
CREATE VIEW item_blueprint_info AS SELECT DISTINCT i._id AS id, t.text AS name, p.last_update AS last_update, ss.name AS solar_system_name, i.volume AS volume, p.sell_price AS sell_price, p.buy_price AS buy_price, p.produce_price AS produce_price, i.chosen_price_id AS chosen_price_id, i.favorite AS favorite, i.group_id AS group_id, g.categorie_id AS categorie_id, b._id AS blueprint_id, t2.text AS blueprint_name, ba.time AS production_time, b.ml AS me, b.pl AS te, CASE i.meta_group_id WHEN 2 THEN 2 WHEN 14 THEN 3 ELSE NULL END AS tech_level, bp.quantity AS unit_per_batch FROM item i LEFT JOIN prices p ON i._id = p.item_id AND p.solar_system_id IN (SELECT solar_system_id FROM stations WHERE role IN (1, 2)) LEFT JOIN solar_systems ss ON p.solar_system_id = ss._id JOIN groups g ON i.group_id = g._id JOIN translation_key tk ON i._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id LEFT JOIN blueprint_product bp ON i._id = bp.item_id LEFT JOIN blueprint b ON bp.blueprint_id = b._id LEFT JOIN blueprint_activity ba ON bp.blueprint_id = ba.blueprint_id AND bp.activity_id = ba.activity_id LEFT JOIN blueprint_product bp2 ON bp2.item_id = b._id AND bp2.activity_id = 8 LEFT JOIN item i2 ON bp.blueprint_id = i2._id LEFT JOIN translation_key tk2 ON i2._id = tk2.key_id AND tk2.tc_id = 8 AND tk2.language_id = l._id LEFT JOIN translation t2 ON tk2.tra_id = t2.tra_id;

--All materials of items (production material, reation, planetary materials)
CREATE VIEW all_item_materials AS SELECT materials._id as id, item_id, t.text AS name, quantity, i.chosen_price_id FROM (SELECT bm.item_id AS _id, bp.item_id AS item_id, CASE ((bm.quantity * (100 - IFNULL(ml, 0)) / 10) - round(bm.quantity * (100 - IFNULL(ml, 0)) / 100) * 10) > 0 WHEN 1 THEN round(bm.quantity * (100 - IFNULL(ml, 0)) / 100) + 1 ELSE round(bm.quantity * (100 - IFNULL(ml, 0)) / 100) END AS quantity FROM blueprint_product bp JOIN blueprint_material bm ON bp.blueprint_id = bm.blueprint_id AND bm.activity_id = bp.activity_id JOIN blueprint b ON bp.blueprint_id = b._id WHERE bm.activity_id = 1 UNION ALL SELECT rm.item_material_id AS _id, rm.item_id AS item_id, rm.quantity FROM reaction_materials rm UNION ALL SELECT input.item_id AS _id, output.item_id, input.quantity FROM planet_schematics_type_map output JOIN planet_schematics_type_map input ON output.schematic_id = input.schematic_id AND output.input = 0 AND input.input = 1) materials JOIN item i ON materials.item_id = i._id JOIN translation_key tk ON materials._id = tk.key_id AND tk.tc_id = 8 JOIN languages l ON tk.language_id = l._id AND l.current = 1 JOIN translation t ON tk.tra_id = t.tra_id;
